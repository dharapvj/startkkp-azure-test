name: "KKP delivery pipeline with GitOps"

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/**'
      - 'kubeone/**'
      - 'kubermatic/**'
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/**'
      - 'terraform/**'

# allows to run multiple tests on PR, but only a single run on `main` branch
concurrency: ci-${{ github.ref }}

env:
  FLUX_ROOT: flux/clusters/master
  KUBEONE_GLOBAL_FLAGS: ''
  KUBEONE_ROOT: kubeone
  KKP_GLOBAL_FLAGS: ''
  KKP_ROOT: kubermatic
  KKP_VERSION: v2.20.0
  TF_OUTPUTS_FILE: outputs.json
  TF_PLAN_FILE: plan.cache
  TF_ROOT: terraform

jobs:
  terraform-validate:
    name: Terraform / Validate
    runs-on: ubuntu-20.04
    container: quay.io/kubermatic/startio-ci:v0.2.4-0
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Validate Terraform KubeOne module
        run: |
          echo '::group::Initializing Terraform working directory'
          terraform -chdir=${TF_ROOT} init -backend=false
          echo '::endgroup::'
          
          echo '::group::Validating Terraform root module'
          terraform -chdir=${TF_ROOT} validate
          terraform -chdir=${TF_ROOT} fmt -check -write=false
          echo '::endgroup::'

  terraform-prepare:
    name: Terraform / Prepare
    runs-on: ubuntu-20.04
    container: quay.io/kubermatic/startio-ci:v0.2.4-0
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Create Terraform backend
        run: |
          chmod +x ${TF_ROOT}/bin/azure/setup_terraform_backend.sh
          ${TF_ROOT}/bin/azure/setup_terraform_backend.sh

  terraform-plan:
    name: Terraform / Plan
    runs-on: ubuntu-20.04
    needs:
      - terraform-validate
      - terraform-prepare
    container: quay.io/kubermatic/startio-ci:v0.2.4-0
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Prepare SSH deployer keys
        run: |
          mkdir ~/.ssh
          echo ${{ secrets.SSH_PUBLIC_KEY }} > ~/.ssh/k8s_rsa.pub
          chmod 600 ~/.ssh/k8s_rsa.pub
      - name: Create Terraform plan
        env:
          TF_CLI_ARGS_plan: ${{ env.TF_CLI_ARGS_plan }}
        run: |
          echo '::group::Initializing Terraform working directory'
          terraform -chdir=${TF_ROOT} init
          echo '::endgroup::'
          
          echo '::group::Generating Terraform plan '
          terraform -chdir=${TF_ROOT} plan -out=${TF_PLAN_FILE}
          echo '::endgroup::'
      - name: Upload Terraform plan
        uses: actions/upload-artifact@v2
        with:
          name: terraform-plan
          path: ${{ env.TF_ROOT }}/${{ env.TF_PLAN_FILE }}

  terraform-apply:
    name: Terraform / Apply
    runs-on: ubuntu-20.04
    needs:
      - terraform-plan
    if: ${{ github.event_name == 'push' }}
    container: quay.io/kubermatic/startio-ci:v0.2.4-0
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Prepare SSH deployer keys
        run: |
          mkdir ~/.ssh
          echo ${{ secrets.SSH_PUBLIC_KEY }} > ~/.ssh/k8s_rsa.pub
          chmod 600 ~/.ssh/k8s_rsa.pub
      - name: Download Terraform plan
        uses: actions/download-artifact@v2
        with:
          name: terraform-plan
          path: ${{ env.TF_ROOT }}
      - name: Apply Terraform plan
        run: |
          echo '::group::Initializing Terraform working directory'
          terraform -chdir=${TF_ROOT} init
          echo '::endgroup::'
          
          echo '::group::Applying Terraform plan'
          terraform -chdir=${TF_ROOT} apply -auto-approve ${TF_PLAN_FILE}
          echo '::endgroup::'

          echo '::group::Generating Terraform outputs'
          terraform -chdir=${TF_ROOT} output -json > ${TF_ROOT}/${TF_OUTPUTS_FILE}
          echo '::endgroup::'
      - name: Upload Terraform outputs
        uses: actions/upload-artifact@v2
        with:
          name: terraform-outputs
          path: ${{ env.TF_ROOT }}/${{ env.TF_OUTPUTS_FILE }}

  kubeone-apply:
    name: KubeOne / Apply
    runs-on: ubuntu-20.04
    needs:
      - terraform-apply
    if: ${{ github.event_name == 'push' }}
    container: quay.io/kubermatic/startio-ci:v0.2.4-0
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Prepare SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Download Terraform outputs
        uses: actions/download-artifact@v2
        with:
          name: terraform-outputs
          path: ${{ env.TF_ROOT }}
      - name: Reconcile KubeOne cluster
        run: |
          echo '::group::Reconciling KubeOne cluster'
          kubeone ${KUBEONE_GLOBAL_FLAGS} \
            --tfjson ${TF_ROOT}/${TF_OUTPUTS_FILE} \
            --manifest ${KUBEONE_ROOT}/kubeone.yaml \
            apply --auto-approve
          echo '::endgroup::'

  kkp-deploy:
    name: Kubermatic / Deploy
    runs-on: ubuntu-20.04
    needs:
      - kubeone-apply
    if: ${{ github.event_name == 'push' }}
    container: quay.io/kubermatic/startio-ci:v0.2.4-0
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Prepare SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Download Terraform outputs
        uses: actions/download-artifact@v2
        with:
          name: terraform-outputs
          path: ${{ env.TF_ROOT }}
      - name: Download KubeOne kubeconfig
        run: |
          kubeone ${KUBEONE_GLOBAL_FLAGS} \
            --tfjson ${TF_ROOT}/${TF_OUTPUTS_FILE} \
            --manifest ${KUBEONE_ROOT}/kubeone.yaml \
            kubeconfig > ${KUBEONE_ROOT}/kubeconfig
      - name: Download KKP installer
        run: |
          wget https://github.com/kubermatic/kubermatic/releases/download/${KKP_VERSION}/kubermatic-ce-${KKP_VERSION}-linux-amd64.tar.gz
          tar -xzvf kubermatic-ce-${KKP_VERSION}-linux-amd64.tar.gz
      - name: Deploy KKP
        env:
          KUBECONFIG: ${{ env.KUBEONE_ROOT }}/kubeconfig
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_SECRET_KEY }}
          SOPS_AGE_KEY_FILE: ${{ env.KKP_ROOT }}/.agekey
        run: |
          echo '::group::Decrypting KKP configuration files'
          echo "${SOPS_AGE_KEY}" > "${SOPS_AGE_KEY_FILE}"
          sops --decrypt --in-place ${KKP_ROOT}/config.yaml
          sops --decrypt --in-place ${KKP_ROOT}/values.yaml
          rm "${SOPS_AGE_KEY_FILE}"
          echo '::endgroup::'

          echo '::group::Running KKP installer'
          ./kubermatic-installer ${KKP_GLOBAL_FLAGS} deploy \
            --config ${KKP_ROOT}/config.yaml \
            --helm-values ${KKP_ROOT}/values.yaml \
            --storageclass azure \
            kubermatic-master
          echo '::endgroup::'
      - name: Initialize other KKP resources
        env:
          KUBECONFIG: ${{ env.KUBEONE_ROOT }}/kubeconfig
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_SECRET_KEY }}
        run: |
          # kubeconfig Secret to be used for Seed cluster configuration
          kubectl create secret generic kubeconfig-cluster -n kubermatic \
            --from-file=kubeconfig=${KUBECONFIG} --dry-run=client -o yaml | kubectl apply -f -
          echo "${SOPS_AGE_KEY}" | kubectl -n kubermatic create secret generic sops-age \
            --from-file=age.agekey=/dev/stdin --dry-run=client -o yaml | kubectl apply -f -

  flux-bootstrap:
    name: Flux / Bootstrap
    runs-on: ubuntu-20.04
    needs:
      - kkp-deploy
    if: ${{ github.event_name == 'push' }}
    container: quay.io/kubermatic/startio-ci:v0.2.4-0
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Check if flux was already bootstrapped
        id: check_flux
        uses: andstor/file-existence-action@v1
        with:
          files: ${{ env.FLUX_ROOT }}/flux-system
      - name: Flux is already bootstrapped in this repository
        if: steps.check_flux.outputs.files_exists == 'true'
        run: echo "Flux is already boostrapped, no action needed"
      - name: Prepare SSH agent
        if: steps.check_flux.outputs.files_exists == 'false'
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Download Terraform outputs
        if: steps.check_flux.outputs.files_exists == 'false'
        uses: actions/download-artifact@v2
        with:
          name: terraform-outputs
          path: ${{ env.TF_ROOT }}
      - name: Download KubeOne kubeconfig
        if: steps.check_flux.outputs.files_exists == 'false'
        run: |
          kubeone ${KUBEONE_GLOBAL_FLAGS} \
            --tfjson ${TF_ROOT}/${TF_OUTPUTS_FILE} \
            --manifest ${KUBEONE_ROOT}/kubeone.yaml \
            kubeconfig > ${KUBEONE_ROOT}/kubeconfig
      - name: Bootstrap Flux
        if: steps.check_flux.outputs.files_exists == 'false'
        env:
          KUBECONFIG: ${{ env.KUBEONE_ROOT }}/kubeconfig
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        run: |
          flux bootstrap github \
            --owner=${GITHUB_REPOSITORY%/*} \
            --repository=${GITHUB_REPOSITORY#*/} \
            --branch=main \
            --personal=true \
            --path=${FLUX_ROOT} \
            --commit-message-appendix='[ci skip]'
